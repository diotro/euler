#lang racket

#|
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.
|#


(require rackunit)



; N -> N
; finds the sum of all even fibonacci numbers below n
(define (even-fibonacci-sum-below n)
  (foldr + 0 (filter even? (fibonacci-up-to n))))


(module+ test
  (check-equal? (even-fibonacci-sum-below 3) 2)
  (check-equal? (even-fibonacci-sum-below 9) 10))

; N -> [List-of N]
; produces the list of all fibonacci numbers up to the given number
(define (fibonacci-up-to up-to)
  (define (build-fib-list lst)
    (cond [(> (first lst) up-to) (rest lst)]
          [else (build-fib-list (cons (+ (first lst) (second lst)) lst))]))
  (reverse (build-fib-list '(1 1))))

(module+ test
  (check-equal? (fibonacci-up-to 5) '(1 1 2 3 5))
  (check-equal? (fibonacci-up-to 9) '(1 1 2 3 5 8)))


; Answer
(even-fibonacci-sum-below 4000000)